// Code generated by MockGen. DO NOT EDIT.
// Source: providers.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/mocks.go -source=providers.go
//

// Package mock_internal is a generated GoMock package.
package mock_internal

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHTTP is a mock of HTTP interface.
type MockHTTP struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPMockRecorder
	isgomock struct{}
}

// MockHTTPMockRecorder is the mock recorder for MockHTTP.
type MockHTTPMockRecorder struct {
	mock *MockHTTP
}

// NewMockHTTP creates a new mock instance.
func NewMockHTTP(ctrl *gomock.Controller) *MockHTTP {
	mock := &MockHTTP{ctrl: ctrl}
	mock.recorder = &MockHTTPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTP) EXPECT() *MockHTTPMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHTTP) Get(arg0 string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockHTTPMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTP)(nil).Get), arg0)
}
